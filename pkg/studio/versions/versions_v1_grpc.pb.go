// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto_versions

import (
	context "context"
	proto_common "github.com/droplez/droplez-go-proto/pkg/proto_common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VersionsClient is the client API for Versions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionsClient interface {
	Get(ctx context.Context, in *VersionId, opts ...grpc.CallOption) (*VersionInfo, error)
	List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Versions_ListClient, error)
	Create(ctx context.Context, in *VersionMeta, opts ...grpc.CallOption) (*VersionInfo, error)
	Update(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (*VersionInfo, error)
	Delete(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (*proto_common.EmptyMessage, error)
}

type versionsClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionsClient(cc grpc.ClientConnInterface) VersionsClient {
	return &versionsClient{cc}
}

func (c *versionsClient) Get(ctx context.Context, in *VersionId, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/versions.Versions/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionsClient) List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Versions_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Versions_ServiceDesc.Streams[0], "/versions.Versions/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &versionsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Versions_ListClient interface {
	Recv() (*VersionInfo, error)
	grpc.ClientStream
}

type versionsListClient struct {
	grpc.ClientStream
}

func (x *versionsListClient) Recv() (*VersionInfo, error) {
	m := new(VersionInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *versionsClient) Create(ctx context.Context, in *VersionMeta, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/versions.Versions/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionsClient) Update(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/versions.Versions/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionsClient) Delete(ctx context.Context, in *VersionInfo, opts ...grpc.CallOption) (*proto_common.EmptyMessage, error) {
	out := new(proto_common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/versions.Versions/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionsServer is the server API for Versions service.
// All implementations must embed UnimplementedVersionsServer
// for forward compatibility
type VersionsServer interface {
	Get(context.Context, *VersionId) (*VersionInfo, error)
	List(*ListOptions, Versions_ListServer) error
	Create(context.Context, *VersionMeta) (*VersionInfo, error)
	Update(context.Context, *VersionInfo) (*VersionInfo, error)
	Delete(context.Context, *VersionInfo) (*proto_common.EmptyMessage, error)
	mustEmbedUnimplementedVersionsServer()
}

// UnimplementedVersionsServer must be embedded to have forward compatible implementations.
type UnimplementedVersionsServer struct {
}

func (UnimplementedVersionsServer) Get(context.Context, *VersionId) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVersionsServer) List(*ListOptions, Versions_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVersionsServer) Create(context.Context, *VersionMeta) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVersionsServer) Update(context.Context, *VersionInfo) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVersionsServer) Delete(context.Context, *VersionInfo) (*proto_common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVersionsServer) mustEmbedUnimplementedVersionsServer() {}

// UnsafeVersionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionsServer will
// result in compilation errors.
type UnsafeVersionsServer interface {
	mustEmbedUnimplementedVersionsServer()
}

func RegisterVersionsServer(s grpc.ServiceRegistrar, srv VersionsServer) {
	s.RegisterService(&Versions_ServiceDesc, srv)
}

func _Versions_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versions.Versions/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsServer).Get(ctx, req.(*VersionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versions_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VersionsServer).List(m, &versionsListServer{stream})
}

type Versions_ListServer interface {
	Send(*VersionInfo) error
	grpc.ServerStream
}

type versionsListServer struct {
	grpc.ServerStream
}

func (x *versionsListServer) Send(m *VersionInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Versions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versions.Versions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsServer).Create(ctx, req.(*VersionMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versions.Versions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsServer).Update(ctx, req.(*VersionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versions.Versions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsServer).Delete(ctx, req.(*VersionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Versions_ServiceDesc is the grpc.ServiceDesc for Versions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Versions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "versions.Versions",
	HandlerType: (*VersionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Versions_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Versions_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Versions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Versions_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Versions_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "studio/versions/versions_v1.proto",
}
