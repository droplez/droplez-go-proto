// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package projects

import (
	context "context"
	common "github.com/droplez/droplez-go-proto/pkg/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsClient interface {
	Create(ctx context.Context, in *ProjectMeta, opts ...grpc.CallOption) (*ProjectInfo, error)
	Update(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectInfo, error)
	Get(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*ProjectInfo, error)
	List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Projects_ListClient, error)
	Delete(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*common.EmptyMessage, error)
}

type projectsClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsClient(cc grpc.ClientConnInterface) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) Create(ctx context.Context, in *ProjectMeta, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, "/projects.Projects/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Update(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, "/projects.Projects/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) Get(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, "/projects.Projects/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) List(ctx context.Context, in *ListOptions, opts ...grpc.CallOption) (Projects_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Projects_ServiceDesc.Streams[0], "/projects.Projects/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Projects_ListClient interface {
	Recv() (*ProjectInfo, error)
	grpc.ClientStream
}

type projectsListClient struct {
	grpc.ClientStream
}

func (x *projectsListClient) Recv() (*ProjectInfo, error) {
	m := new(ProjectInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectsClient) Delete(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/projects.Projects/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
// All implementations must embed UnimplementedProjectsServer
// for forward compatibility
type ProjectsServer interface {
	Create(context.Context, *ProjectMeta) (*ProjectInfo, error)
	Update(context.Context, *ProjectInfo) (*ProjectInfo, error)
	Get(context.Context, *ProjectId) (*ProjectInfo, error)
	List(*ListOptions, Projects_ListServer) error
	Delete(context.Context, *ProjectInfo) (*common.EmptyMessage, error)
	mustEmbedUnimplementedProjectsServer()
}

// UnimplementedProjectsServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServer struct {
}

func (UnimplementedProjectsServer) Create(context.Context, *ProjectMeta) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectsServer) Update(context.Context, *ProjectInfo) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProjectsServer) Get(context.Context, *ProjectId) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectsServer) List(*ListOptions, Projects_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectsServer) Delete(context.Context, *ProjectInfo) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectsServer) mustEmbedUnimplementedProjectsServer() {}

// UnsafeProjectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServer will
// result in compilation errors.
type UnsafeProjectsServer interface {
	mustEmbedUnimplementedProjectsServer()
}

func RegisterProjectsServer(s grpc.ServiceRegistrar, srv ProjectsServer) {
	s.RegisterService(&Projects_ServiceDesc, srv)
}

func _Projects_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.Projects/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Create(ctx, req.(*ProjectMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.Projects/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Update(ctx, req.(*ProjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.Projects/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Get(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectsServer).List(m, &projectsListServer{stream})
}

type Projects_ListServer interface {
	Send(*ProjectInfo) error
	grpc.ServerStream
}

type projectsListServer struct {
	grpc.ServerStream
}

func (x *projectsListServer) Send(m *ProjectInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Projects_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projects.Projects/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).Delete(ctx, req.(*ProjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Projects_ServiceDesc is the grpc.ServiceDesc for Projects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Projects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projects.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Projects_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Projects_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Projects_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Projects_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Projects_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "studio/projects/projects_v1.proto",
}
